import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7657060900:AAFgnNmu1fYG8StMN4f1klc4OQ63-Ivk6iI"  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = 6296953786  # —Ç–≤–æ–π Telegram ID

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∞–Ω–∫–µ—Ç ===
user_state = {}
user_answers = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
start_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="get_form")]
    ]
)

def admin_kb(user_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
            ]
        ]
    )

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤–æ —Ñ–ª—É–¥ –Ω–∞–∂–º–∏ –Ω–∞ ¬´–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É¬ª",
        reply_markup=start_kb
    )

@dp.message(Command("get_id"))
async def get_chat_id(message: types.Message):
    chat = message.chat
    await message.answer(
        f"üëë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
        f"üìç Chat ID: `{chat.id}`\n"
        f"üìç –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–õ–∏—á–∫–∞/–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç'}\n"
        f"üìç –¢–∏–ø —á–∞—Ç–∞: {chat.type}",
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "get_form")
async def send_form(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        """–ê–Ω–∫–µ—Ç–∞:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç
‚Ä¢ –ê–∫—Ç–∏–≤/–ù–µ–∞–∫—Ç–∏–≤
‚Ä¢ –°–º–æ—Ç—Ä–µ–ª(-–∞) –∞–Ω–∏–º–µ/—á–∏—Ç–∞–ª(-–∞) –Ω–æ–≤–µ–ª–ª—É/–º–∞–Ω–≤—Ö—É/–≤—Å–µ –≤–º–µ—Å—Ç–µ?
‚Ä¢ –ì–æ—Ç–æ–≤(-–∞) –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É –≤–µ—Å–µ–ª—å—é –∏ –≤–∞–π–±—É?
‚Ä¢ –†–æ–ª—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏

‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    )
    user_state[callback_query.from_user.id] = "waiting_for_form"
    await callback_query.answer()

@dp.message()
async def handle_form(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_state and user_state[user_id] == "waiting_for_form":
        user_answers[user_id] = message.text

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\n{message.text}",
            reply_markup=admin_kb(user_id)
        )

        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èü¶ã")
        user_state.pop(user_id)

@dp.callback_query(F.data.startswith(("accept_", "decline_")))
async def admin_decision(callback_query: types.CallbackQuery):
    action, user_id = callback_query.data.split("_")
    user_id = int(user_id)

    if action == "accept":
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É
            invite_link = await bot.create_chat_invite_link(
                chat_id=GROUP_CHAT_ID,
                member_limit=1,
                creates_join_request=False
            )

            # –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            join_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üå∏ –ü–µ—Ä–µ–π—Ç–∏ –≤–æ —Ñ–ª—É–¥", url=invite_link.invite_link)]
                ]
            )

            await bot.send_message(
                user_id,
                "üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–¶–∞—Ä—Å—Ç–≤–æ –°–µ –õ—è–Ω—è¬ª! üå∏\n\n"
                "üîÆ –í–∞—Å –∂–¥—ë—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤–µ—Å–µ–ª—å–µ, –¥—Ä—É–∂–±–∞ –∏ —É—é—Ç–Ω—ã–π –≤–∞–π–±.\n\n"
                "‚ö° –í–Ω–∏–º–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —É—Å–ø–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!",
                reply_markup=join_kb
            )
        except Exception as e:
            await bot.send_message(ADMIN_CHAT_ID, f"‚ùó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")

    elif action == "decline":
        await bot.send_message(
            user_id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            "‚ú® –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ!"
        )

    await callback_query.answer("–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
